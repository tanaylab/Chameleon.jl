using Test
using Random

using Chameleon

function verify(
    actual::Tuple{AbstractVector{<:AbstractString}, AbstractMatrix{<:Real}},
    expected::Tuple{AbstractVector{<:AbstractString}, AbstractMatrix{<:Real}},
)::Nothing
    @test actual[1] == expected[1]
    @test isapprox(actual[2], expected[2])
    return nothing
end

@testset "distinct_colors" begin
    verify(distinct_colors(1), (["#4D966A"], [56.65763086178544; -33.59375; 16.639915253494337;;]))
    verify(
        distinct_colors(2),
        (
            ["#4D966A", "#BE69BC"],
            [56.65763086178544 56.65763086178544; -33.59375 46.09375; 16.639915253494337 -29.367684322553956],
        ),
    )
    verify(
        distinct_colors(3),
        (
            ["#4D966A", "#BE69BC", "#E0610F"],
            [
                56.65763086178544 56.65763086178544 56.65763086178544
                -33.59375 46.09375 46.09375
                16.639915253494337 -29.367684322553956 62.647514829542615
            ],
        ),
    )
    verify(
        distinct_colors(4),
        (
            ["#4D966A", "#BE69BC", "#E0610F", "#F93C6F"],
            [
                56.65763086178544 56.65763086178544 56.65763086178544 56.65763086178544
                -33.59375 46.09375 46.09375 72.65625
                16.639915253494337 -29.367684322553956 62.647514829542615 16.639915253494337
            ],
        ),
    )
    verify(
        distinct_colors(8),
        (
            ["#3D67C5", "#9C3FC6", "#9B5288", "#C6314D", "#2DE36E", "#4BD6FB", "#50DDB6", "#B3D270"],
            [
                45.310692273653956 45.310692273653956 45.310692273653956 45.310692273653956 79.99999740834517 79.99999740834517 79.99999740834517 79.99999740834517
                16.835258528590202 59.320807084441185 38.078032806515694 59.320807084441185 -68.13583858311176 -25.65029002726078 -46.89306430518627 -25.65029002726078
                -53.526962727174066 -53.526962727174066 -16.733398384089853 20.06016595899436 44.58920885438383 -28.997919831784586 7.795644511299628 44.58920885438383
            ],
        ),
    )
    verify(
        distinct_colors(16),
        (
            [
                "#2D549B",
                "#8B4102",
                "#6E28CD",
                "#79389B",
                "#A4096C",
                "#9A2F3E",
                "#38AE8F",
                "#1CB358",
                "#89A659",
                "#B09D0E",
                "#978FFA",
                "#C2935C",
                "#E28619",
                "#D96FFB",
                "#D77DC6",
                "#F3785E",
            ],
            [
                36.45251985592813 36.45251985592813 36.45251985592813 36.45251985592813 36.45251985592813 36.45251985592813 64.36011783685626 64.36011783685626 64.36011783685626 64.36011783685626 64.36011783685626 64.36011783685626 64.36011783685626 64.36011783685626 64.36011783685626 64.36011783685626
                11.083984375 28.173828125 62.353515625 45.263671875 62.353515625 45.263671875 -40.185546875 -57.275390625 -23.095703125 -6.005859375 28.173828125 11.083984375 28.173828125 62.353515625 45.263671875 45.263671875
                -42.78681923028857 46.0146137749517 -72.38729689870199 -42.78681923028857 -13.186341561875139 16.41413610653828 6.5473102170671496 36.1477878854806 36.1477878854806 65.74826555389402 -52.6536451197597 36.1477878854806 65.74826555389402 -52.6536451197597 -23.053167451346283 36.1477878854806
            ],
        ),
    )
end

@testset "data_colors" begin
    @test data_colors(Float32[;;]) == AbstractString[]
    @test data_colors(Float32[;;]; groups = Int[]) == Dict{Int, AbstractString}()

    data_1d = [0.06125332440084552 0.33737473291406295 0.7600150582310566 0.8475526731190665]
    @test data_colors(data_1d) == ["#BE69BC", "#F93C6F", "#E0610F", "#4D966A"]

    @test data_colors(data_1d; groups = ["Foo", "Foo", "Foo", "Foo"]) == Dict("Foo" => "#4D966A")
    @test data_colors(data_1d; groups = ["Foo", "Foo", "Bar", "Bar"]) == Dict("Bar" => "#BE69BC", "Foo" => "#4D966A")
    @test data_colors(data_1d; groups = ["Foo", "Foo", "Bar", "Baz"]) ==
          Dict("Baz" => "#4D966A", "Bar" => "#E0610F", "Foo" => "#BE69BC")

    data_2d = [
        0.4390212884560243 0.74674043408418 0.8202162664134421 0.6144670260639536
        0.8413600164621117 0.34693476902144 0.4030219733844424 0.7429009312699808
    ]
    @test data_colors(data_2d) == ["#BE69BC", "#4D966A", "#E0610F", "#F93C6F"]

    @test data_colors(data_2d; groups = ["Foo", "Foo", "Bar", "Baz"]) ==
          Dict("Baz" => "#4D966A", "Bar" => "#E0610F", "Foo" => "#BE69BC")

    data_3d = [
        0.5284647735635772 0.4001151346209255 0.5424741324067637 0.8037896090600110
        0.0270380855690938 0.4288475374651952 0.7531536152631046 0.7706077401535416
        0.0396268412977678 0.0761930344374054 0.6436627775052098 0.1254030514027273
    ]
    @test data_colors(data_3d) == ["#F93C6F", "#E0610F", "#4D966A", "#BE69BC"]

    @test data_colors(data_3d; run_umap = false) == ["#F93C6F", "#E0610F", "#4D966A", "#BE69BC"]

    @test data_colors(data_3d; groups = ["Foo", "Foo", "Bar", "Baz"]) ==
          Dict("Baz" => "#4D966A", "Bar" => "#E0610F", "Foo" => "#BE69BC")

    data_deep = [
        0.800732   0.770030  0.902046    0.353569    0.215916   0.221547  0.906084   0.927982
        0.048792   0.603003  0.275489    0.012249    0.093407   0.948738  0.437136   0.092593
        0.260171   0.404593  0.503586    0.495254    0.353701   0.697552  0.654311   0.822687
        0.144251   0.302001  0.447234    0.944937    0.069519   0.132409  0.476737   0.558966
        0.653869   0.237177  0.114409    0.486212    0.562114   0.855697  0.548113   0.823823
        0.153045   0.432957  0.471455    0.398598    0.005987   0.595396  0.660205   0.933496
        0.604117   0.564037  0.410694    0.001661    0.615843   0.428920  0.990649   0.111783
        0.993313   0.914004  0.232316    0.393183    0.56032    0.170953  0.082538   0.620487
        0.524301   0.560798  0.670531    0.859865    0.491597   0.506022  0.375388   0.599436
        0.401784   0.979078  4.922e-5    0.907005    0.671979   0.316869  0.068477   0.829268
    ]
    Random.seed!(123456)
    println("Ignore the following UMAP warnings, that's their problem.")
    @test data_colors(data_deep) ==
          ["#C6314D", "#3D67C5", "#B3D270", "#50DDB6", "#4BD6FB", "#9B5288", "#9C3FC6", "#2DE36E"]
end
